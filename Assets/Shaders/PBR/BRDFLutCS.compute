// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMainBRDFIntegrate

#define PI 3.1415926

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float4> _Result;
//RWTexture2D<float4> _Result;

uint _Resolution;   

// Van Der Corput
float RadicalInverse_Vdc(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// generate random value in [0, 1]
// Hammersley
float2 Hammersley(uint i, uint N)
{
    return float2(float(i) / float(N), RadicalInverse_Vdc(i));
}

// GGX important sample
float3 ImportanceNormalSampleGGX(float2 Xi, float3 N, float roughness)
{
    float a = roughness * roughness;
    
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    
    // from spherical coordinates to cartesian coordinates
    float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
    
    // from tangent-space vector to world-space sample vector
    float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    float3 tangent = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);
    
    float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float a = roughness;
    float k = (a * a) / 2.0;

    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

// ----------------------------------------------------------------------------
float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

[numthreads(8, 8, 1)]
void CSMainBRDFIntegrate(uint3 id : SV_DispatchThreadID)
{
    float2 uv = (float2) id.xy / (float2) (_Resolution) + 0.5 / (float2) _Resolution;
    uint index = id.y * _Resolution + id.x;    
    
    // the next two line from our uv instead of value of function
    float NdotV = uv.x;
    float roughness = uv.y;
    
    float3 viewDir = float3(0.0, 0.0, 0.0);
    viewDir.x = sqrt(1.0 - NdotV * NdotV);
    viewDir.y = 0.0;
    viewDir.z = NdotV;
    
    // result = F0 * A + B(both A and B are BRDF subterm)
    float A = 0.0;
    float B = 0.0;
    
    float3 normalDir = float3(0.0, 0.0, 1.0);
    
    const uint SAMPLE_COUNT = 1024u;
    for (uint i = 0u; i < SAMPLE_COUNT; i++)
    {
        float2 Xi = Hammersley(i, SAMPLE_COUNT);
        float3 halfDir = ImportanceNormalSampleGGX(Xi, normalDir, roughness);
        float3 lightDir = normalize(2.0 * dot(viewDir, halfDir) * halfDir - viewDir);
        
        float NdotL = max(0.0, dot(normalDir, lightDir));
        float NdotH = max(0.0, dot(normalDir, halfDir));
        float VdotH = max(0.0, dot(viewDir, halfDir));
        
        if (NdotV > 0.0)
        {
            float Geo_term = GeometrySmith(normalDir, viewDir, lightDir, roughness);
            float G_vis = (Geo_term * VdotH) / (NdotH * NdotV);
            float Fc = pow(1 - VdotH, 5.0);
            
            A += (1.0 - Fc) * G_vis;
            B += Fc * G_vis;
        }
    }
    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);
        
    _Result[index] = float4(float2(A, B), 0.0, 1.0);
}