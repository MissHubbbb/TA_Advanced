// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMainDiffuse
#pragma kernel CSMainGGX
//#pragma kernel CSMainBRDFIntegrate

#define PI 3.1415926

TextureCube<float4> _Cubemap;
SamplerState _PointClamp;
RWStructuredBuffer<float4> _Result;     //自定义结构的buffer
int _Face;      //立方体面的序号
int _Resolution;    //分辨率
float _SampleCubemapSize;
float _FilterMipRoughness;

//根据面和uv计算方向
float3 DirectionFromCubemapTexel(int face, float2 uv)
{
    float3 dir = 0;
    
    switch (face)
    {
    case 0:      //+X
            dir.x = 1.0;
            dir.yz = uv.yx * (-2.0) + 1.0;
            break;

    case 1:     //-X
            dir.x = -1.0;
            dir.y = uv.y * (-2.0) + 1.0f;
            dir.z = uv.x * 2.0f - 1.0f;
            break;
            
    case 2:     //+Y
            dir.xz = uv * 2.0f - 1.0f;
            dir.y = 1.0f;
            break;
            
     case 3:     //-Y
            dir.x = uv.x * 2.0f - 1.0f;
            dir.z = uv.y * -2.0f + 1.0f;
            dir.y = -1.0f;
            break;
            
    case 4:     //+Z
            dir.x = uv.x * 2.0f - 1.0f;
            dir.y = uv.y * -2.0f + 1.0f;
            dir.z = 1.0f;
            break;
            
    case 5:     //-Z
            dir.xy = uv * -2.0f + 1.0f;
            dir.z = -1.0f;
            break;
    }
    
    return normalize(dir);
}

[numthreads(8,8,1)]     //一个线程组可以被执行的线程的总数量
void CSMainDiffuse(uint3 id : SV_DispatchThreadID)
{
    float2 uv = (float2) id.xy / (float2) (_Resolution) + 0.5 / (float2) _Resolution;
    uint index = id.y * _Resolution + id.x;
    float3 dir = DirectionFromCubemapTexel(_Face, uv);
    
    // tangent space calculation from origin point
    float3 tangent = float3(0, 1, 0);
    float upODown = dot(dir, tangent);
    if (upODown == 1)
    {
        tangent = float3(1, 0, 0);
    }
    else if (upODown == -1)
    {
        tangent = float3(-1, 0, 0);
    }
    else
    {
        tangent = normalize(cross(float3(0, 1, 0), dir));
    }
    
    float3 binormal = normalize(cross(dir, tangent));
    float sampleDelta = 0.025;
    float nrSamples = 0.0;
    float3 irradiance = float3(0, 0, 0);
    
    for (float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
    {
        for (float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
        {
            // spherical to cartesian (in tangent space)
            float3 tangentSample = float3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));

            // tangent space to world space
            float3 sampleVec = tangentSample.x * binormal + tangentSample.y * tangent + tangentSample.z * dir;
            
            irradiance += _Cubemap.SampleLevel(_PointClamp, sampleVec, 0).rgb * cos(theta) * sin(theta);
            nrSamples++;
        }
    }
    
    irradiance = PI * irradiance * (1.0 / float(nrSamples));
    
    _Result[index] = float4(irradiance.xyz, 1.0);
}

// Van Der Corput
float RadicalInverse_Vdc(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// generate random value in [0, 1]
// Hammersley
float2 Hammersley(uint i, uint N)
{
    return float2(float(i) / float(N), RadicalInverse_Vdc(i));
}

// GGX important sample
float3 ImportanceNormalSampleGGX(float2 Xi, float3 N, float roughness)
{
    float a = roughness * roughness;
    
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    
    // from spherical coordinates to cartesian coordinates
    float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
    
    // from tangent-space vector to world-space sample vector
    float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    float3 tangent = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);
    
    float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float NormalDistributionGGX(float NdotH, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH2 = NdotH * NdotH;
    
    float nuor = a2;
    float deno = NdotH2 * (a2 - 1.0) + 1.0;
    deno = PI * deno * deno;

    return nuor / deno;
}

[numthreads(1, 1, 1)]
void CSMainGGX(uint3 id : SV_DispatchThreadID)
{
    float2 uv = (float2) id.xy / (float2) (_Resolution) + 0.5 / (float2) _Resolution;
    uint index = id.y * _Resolution + id.x;
    float3 dir = DirectionFromCubemapTexel(_Face, uv);
    
    float3 N = normalize(dir);
    float3 R = N;
    float3 V = R;
    
    const uint SAMPLE_COUNT = 1024u;
    float totalWeight = 0.0;
    float3 prefilteredColor = float3(0.0, 0.0, 0.0);
    
    for (uint i = 0u; i < SAMPLE_COUNT; i++)
    {
        float2 Xi = Hammersley(i, SAMPLE_COUNT);
        float3 H = ImportanceNormalSampleGGX(Xi, N, _FilterMipRoughness);
        float3 L = normalize(2.0 * dot(V, H) * H - V);
        
        float NdotL = max(dot(N, L), 0.0);
        if (NdotL > 0.0)        //将半球面上的所有光源颜色都加起来
        {
            //基于roughness和pdf来采样环境光照贴图的相应mipmap图
            float NdotH = max(0.0, dot(N, H));
            float HdotV = max(0.0, dot(H, V));
            float NDF = NormalDistributionGGX(NdotH, _FilterMipRoughness);
            float pdf = NDF * NdotH / (4.0 * HdotV) + 0.0001;            
            
            float resolution = _SampleCubemapSize;          //cubemap每一面的分辨率
            float saTexel = 4.0 * PI / (6.0 * resolution * resolution);     //每个纹素的大小
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);
            
            float mipLevel = _FilterMipRoughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);
            
            prefilteredColor += _Cubemap.SampleLevel(_PointClamp, L, 0).rgb * NdotL;
            totalWeight += NdotL;
        }
    }

    //滤波
    prefilteredColor = prefilteredColor / totalWeight;
    
    //将滤波后的颜色作为输出值
    _Result[index] = float4(prefilteredColor.xyz, 1.0);
}

